/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run main.nf -profile dkfz_cluster_hg38,singularity --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

params {
    config_profile_contact     = 'Kübra Narcı kuebra.narci@dkfz-heidelberg.de'
    config_profile_name        = 'Test profile for DKFZ cluster'
    config_profile_description = 'Test dataset for to check pipeline function'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 32
    max_memory = '500.GB'
    max_time   = '48.h'

    // Input data
    input  = 'assets/samplesheet.csv'

    // workflow parameters
    outdir                     = "results"

    // Post Processes
    runSNVAnnotation           = true
    runArtifactFilter          = true
    generateExtendedQcPlots    = true 
    runSNVDeepAnnotation       = true
    runSNVVCFFilter            = true
    skip_multiqc               = false
    runCompareGermline         = true
    runcontigs                 = "NONE"   // "ALT_HLA | ALL | NONE"


    // Annovar
    annotation_tool            = "annovar"
    buildver                   = "hg38"
    dbtype                     = "wgEncodeGencodeCompV39"
    segdupcol                  = "SEGDUP"
    cytobandcol                = "CYTOBAND"
    geneannocols               = '"ANNOVAR_FUNCTION,GENE,EXONIC_CLASSIFICATION,ANNOVAR_TRANSCRIPTS"'
    annovar_path               = "/omics/odcf/reference_data/legacy/ngs_share/assemblies/hg_GRCh38/databases/ANNOVAR/annovar_Sept2022"

    min_confidence_score       = 8         

    // Reference //
    data_path                  = "/omics/odcf/reference_data/legacy/ngs_share/assemblies/hg_GRCh38"
    fasta                      = '/omics/odcf/reference_data/legacy/ngs_share/assemblies/hg_GRCh38/sequence/GRCh38_decoy_ebv_alt_hla_phiX.fa'
    fasta_fai                  = '/omics/odcf/reference_data/legacy/ngs_share/assemblies/hg_GRCh38/sequence/GRCh38_decoy_ebv_alt_hla_phiX.fa.fai'
    chrom_sizes                = '/omics/odcf/reference_data/legacy/ngs_share/assemblies/hg_GRCh38/stats/GRCh38_decoy_ebv_alt_hla_phiX.fa.chrLenOnlyACGT_realChromosomes.tsv'
    chr_prefix                 = "chr"
    //contig_file                = "assets/GRCh38_decoy_ebv_phiX_alt_hla_chr.contig.bed"

    // Annotation files
    k_genome                   ="${params.data_path}/databases/1000Genome/hg38/ALL.wgs.shapeit2_integrated_snvindels_v2a.GRCh38.27022019.sites.vcf.gz"
    dbsnp_snv                  ="${params.data_path}/databases/dbSNP/dbSNP_151_GRCh38.p7/00-All_v151_GRCh38.SNV.vcf.gz"
    local_control_wgs          ="${params.data_path}/databases/LocalControls/ExclusionList_2019_liftover/MPsnvs_PLindels/GRCh38_ExclusionList_2019_HIPO-PCAWG_MP_PL_WGS.SNVs.AFgt1.vcf.gz"
    local_control_wes          ="${params.data_path}/databases/LocalControls/ExclusionList_2019_liftover/MPsnvs_PLindels/GRCh38_ExclusionList_2019_H021_MP_PL_WES.SNVs.AFgt1.vcf.gz"   
    gnomad_genomes             ="${params.data_path}/databases/gnomAD/v3/genomes/gnomad.genomes.r3.0.sites.SNV.vcf.gz"
    gnomad_exomes              ="${params.data_path}/databases/gnomAD/v2.1.1/exomes_liftover_grch38/gnomad.exomes.r2.1.1.sites.liftover_grch38.SNV.vcf.gz"

    // SNV reability files
    mapability_file            ="${params.data_path}/stats/mappability_m2e2/GRCh38_Mappability_Align_100mer_m2e2.ALT_HLA.bedGraph.gz"
    repeat_masker              ="${params.data_path}/databases/UCSC/repeatMasker/2019-08-14_RepeatMasker_Human_hg38.sorted_plain.bed.gz"
    simple_tandemrepeats       ="${params.data_path}/databases/UCSC/simple_tandem_repeats/2019-08-15_SimpleTandemRepeats_Human_hg38.sorted_plain.bed.gz"

    // Deep Annotation files
    cpgislands_file            ="${params.data_path}/databases/UCSC/cpg_islands/2019-08-15_CpG_Islands_Human_hg38.sorted_plain.bed.gz"
    encode_dnase_file          ="${params.data_path}/databases/UCSC/DNAase/2019-08-15_Encode_DNAase_clusters_Human_hg38.sorted_plain.bed.gz"
    mirbase_file               ="${params.data_path}/databases/miRNA/miRBase_version-22_hg38.sorted_plain.bed.gz"
    cosmic_file                ="${params.data_path}/databases/COSMIC/cosmic_v81/Cosmic_v81_hg38_all.coding_snvs.bed.gz"
    encode_tfbs_file           ="${params.data_path}/databases/UCSC/TF_clusters/2019-08-15_Encode_TF_clusters_Human_hg38.sorted_plain.bed.gz"
    enchancer_file             ="${params.data_path}/databases/enhancers/FANTOM5/F5.hg38.enhancers.sorted_plain.bed.gz"
    mirna_sncrnas_file         ="${params.data_path}/databases/miRNA/dashr.v2.sncRNA.annotation.hg38.sncType.sorted_plain.bed.gz"
}

// Perform work directory cleanup when the run has succesfully completed
 cleanup = true

// Reduce the job submit rate to about 5 per second, this way the server won't be bombarded with jobs

singularity {
  enabled = true
  cacheDir = "/omics/groups/OE0608/internal/kubran/singularity"
  autoMounts = true
  runOptions = "-B /omics/groups -B /omics/odcf/analysis -B /omics/odcf/project -B /omics/odcf/reference_data"
}
env {
    SINGULARITY_CACHEDIR="/omics/groups/OE0608/internal/kubran/singularity"
    SINGULARITY_LIBRARYDIR="/omics/groups/OE0608/internal/kubran/singularity/library"
}

process {
  executor = 'lsf'
  scratch = '$SCRATCHDIR/$LSB_JOBID'

}
executor {
  name = 'lsf'
  perTaskReserve = false
  perJobMemLimit = true
  submitRateLimit = '30 sec'
  queueSize=50
  }


withName:'CUSTOM_DUMPSOFTWAREVERSIONS|SET_CHR|CHECK_IF_CORRUPTED|GREP_SAMPLENAME|JSON_REPORT|MERGE_PLOTS|SAMPLESHEET_CHECK' {
    cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
    memory          = { check_max( 1.GB * task.attempt, 'memory' ) }
}
withName: 'MULTIQC' {
    cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
    memory          = { check_max( 12.GB * task.attempt, 'memory' ) }
}
withName: '*MPILEUP*' {
    cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
    memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    time            = { check_max( 32.h   * task.attempt, 'time'    ) }
}
withName: 'TRIPLET_PLOTTER' {
    time            = { check_max( 32.h   * task.attempt, 'time'    ) }
}
withName: 'ANNOTATE_VCF|ANNOTATION_PIPES|FILTER_PEOVERLAP' {
    cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
    memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    time            = { check_max( 32.h   * task.attempt, 'time'    ) }
}

