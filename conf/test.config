/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run main.nf -profile test,singularity
        nextflow run main.nf -profile test,docker    
----------------------------------------------------------------------------------------
*/

params {
    config_profile_contact     = 'Kübra Narcı kuebra.narci@dkfz-heidelberg.de'
    config_profile_name        = 'Test profile for CI/CD test'
    config_profile_description = 'Use test dataset and test profile for pytest on github actions'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 30
    max_memory = '250.GB'
    max_time   = '48.h'

    // Input data
    input       = "${projectDir}/seq2_testdata_snv/samplesheet_test.csv"

    // workflow parameters
    outdir      = "${projectDir}/results"

    // Post Processes
    runcontigs                 = "NONE"

    // Reference Files //
    genome                     = "GRCh38"

     // Annovar
    buildver                   = "hg38"
    dbtype                     = "wgEncodeGencodeCompV39"
    segdupcol                  = "SEGDUP"
    cytobandcol                = "CYTOBAND"
    geneannocols               = '"ANNOVAR_FUNCTION,GENE,EXONIC_CLASSIFICATION,ANNOVAR_TRANSCRIPTS"'
    annovar_path               = "/Users/w620-admin/Desktop/Workflows/Annovar/annovar_Sept2022"

    k_genome                   ="${projectDir}/seq2_testdata_snv/annotations/kgenome_integrated_snvindels_v2a.GRCh38.27022019.sites.test.vcf.gz"
    dbsnp_snv                  ="${projectDir}/seq2_testdata_snv/annotations/dbsnp_v151_GRCh38.SNV.sorted.test.vcf.gz"
    local_control_wgs          ="${projectDir}/seq2_testdata_snv/annotations/GRCh38_ExclusionList_local_WGS.SNVs.test.vcf.gz"
    local_control_wes          ="${projectDir}/seq2_testdata_snv/annotations/GRCh38_ExclusionList_localL_WES.SNVs.test.vcf.gz"   
    gnomad_genomes             ="${projectDir}/seq2_testdata_snv/annotations/gnomad.genomes.SNV.test.vcf.gz"
    gnomad_exomes              ="${projectDir}/seq2_testdata_snv/annotations/gnomad.exomes.SNV.test.vcf.gz"

    // SNV reability files
    mapability_file            ="${projectDir}/seq2_testdata_snv/annotations/GRCh38_Mappability.test.bed.gz"

    // Deep Annotation files
    cpgislands_file            ="${projectDir}/seq2_testdata_snv/annotations/CpG_Islands_Human_hg38.sorted_plain.test.bed.gz"
}

// Enable container engines/virtualisation envs for CI testing
// only works when specified with the profile ENV
// otherwise tests can be done with the regular provided profiles
if (System.getenv('PROFILE')) {
    if ("$PROFILE" == "docker") {
        conda.enabled                            = false
        docker.enabled                           = true
        docker.userEmulation                     = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled                     = false
        podman.enabled                           = false
        shifter.enabled                          = false
        singularity.enabled                      = false
    } else if ("$PROFILE" == "singularity") {
        conda.enabled                            = false
        params.singularity_pull_docker_container = false
        singularity.autoMounts                   = true
        singularity.enabled                      = true
        charliecloud.enabled                     = false
        docker.enabled                           = false
        podman.enabled                           = false
        shifter.enabled                          = false
    }
}
process {
   withName:'BCFTOOLS_MPILEUP'{
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 6.GB * task.attempt, 'memory' ) }
   }
   withName:'FILE_CONCATENATOR'{
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 6.GB * task.attempt, 'memory' ) }
   }
   withName:'MULTIQC'{
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 6.GB * task.attempt, 'memory' ) }
   }  
    withName:'FILTER_PEOVERLAP|TRIPLET_PLOTTER'{
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 12.GB * task.attempt, 'memory' ) }
   }
}

